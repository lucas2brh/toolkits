# ansible-playbook upgrade_geth.yml -e "version=v0.9.4 bin_url=https://story-geth-binaries.s3.us-west-1.amazonaws.com/geth-public/geth-linux-amd64-0.9.4-unstable-03e05c9.tar.gz" -l mini-validator1
# 

---
- name: Geth upgrade
  hosts: mininet
  serial: 1
  vars:
    user_home: "/home/ec2-user"
    bin_url: "" 
    version: "" 

  tasks:
    - name: Ensure version to upgrade
      fail:
        msg: "Usage: Provide the version to run"
      when: version == ""

    - name: Verify that the binary URL is reachable
      uri:
        url: "{{ bin_url }}"
        return_content: no
        method: HEAD
        status_code: 200
      register: url_check
      failed_when: url_check.status != 200
      retries: 3  
      delay: 5  
      ignore_errors: no

    - name: Create directory for extracted binary
      file:
        path: "{{ user_home }}/{{ version }}"
        state: directory
        mode: '0755'

    - name: Download Binary From URL
      get_url:
        url: "{{ bin_url }}"
        dest: "{{ user_home }}/{{ version }}.tar.gz"
        mode: '0644'

    - name: Extract the downloaded binary
      unarchive:
        src: "{{ user_home }}/{{ version }}.tar.gz"
        dest: "{{ user_home }}/{{ version }}"
        remote_src: yes

    - name: Remove the downloaded tar.gz file
      file:
        path: "{{ user_home }}/{{ version }}.tar.gz"
        state: absent

    - name: Find the extracted binary file (assuming there is only one file)
      shell: "find {{ user_home }}/{{ version }} -type f -name 'geth*' | head -n 1"
      register: binary_path

    - name: Display the binary path
      debug:
        var: binary_path.stdout

    - name: Ensure binary has executable permissions
      file:
        path: "{{ binary_path.stdout }}"
        mode: '0755'
        state: file

    # Stop services, replace binary, and start services in sequence with timing
    - name: Stop cosmovisor and node-geth, replace Geth binary, and start services with timing
      shell: |
        # Record the start time
        start_time=$(date +%s)

        # Stop cosmovisor and node-geth in sequence
        systemctl stop cosmovisor
        systemctl stop node-geth

        # Replace the Geth binary from the prepared local path
        cp {{ binary_path.stdout }} /usr/local/bin/geth

        # Start node-geth and cosmovisor in sequence
        systemctl start node-geth
        systemctl start cosmovisor

        # Record the end time
        end_time=$(date +%s)

        # Calculate the duration and display it
        echo "Total time taken: $((end_time - start_time)) seconds"
      register: service_operations_result
      become: yes

    - name: Display result of service operations and time taken
      debug:
        var: service_operations_result.stdout

    - name: Check if geth version
      command: geth version
      register: geth_check_result
      ignore_errors: yes

    - name: Display result
      debug:
        var: geth_check_result.stdout

    - name: Remove the extracted binary directory
      file:
        path: "{{ user_home }}/{{ version }}"
        state: absent
      become: yes

    - name: Get latest 10 lines of node-geth logs
      shell: journalctl -u node-geth -n 10
      register: node_geth_logs
      ignore_errors: yes

    - name: Display latest node-geth logs
      debug:
        var: node_geth_logs.stdout

    - name: Get latest 20 lines of cosmovisor logs
      shell: journalctl -u cosmovisor -n 20
      register: cosmovisor_logs
      ignore_errors: yes

    - name: Display latest cosmovisor logs
      debug:
        msg: "{{ cosmovisor_logs.stdout.split('\n') }}"