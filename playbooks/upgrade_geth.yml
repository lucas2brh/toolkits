# ansible-playbook playbooks/upgrade_geth.yml -e "version=v0.11.0 bin_url=https://github.com/piplabs/story-geth/releases/download/v0.11.0/geth-linux-amd64 sha256_url=https://github.com/piplabs/story-geth/releases/download/v0.11.0/geth-linux-amd64.sha256"

---
- name: Geth upgrade
  hosts: all
  serial: 1
  vars:
    user_home: "/home/ec2-user"
    # user_home: "/home/ubuntu"
    bin_url: ""
    sha256_url: ""
    version: "" 

  tasks:
    - name: Ensure version to upgrade
      fail:
        msg: "Usage: Provide the version to run"
      when: version == ""

    - name: Ensure SHA256 URL is provided
      fail:
        msg: "Usage: Provide the SHA256 checksum URL"
      when: sha256_url == ""

    - name: Create directory for extracted binary
      file:
        path: "{{ user_home }}/{{ version }}"
        state: directory
        mode: '0755'

    - name: Verify that the binary URL is reachable
      uri:
        url: "{{ bin_url }}"
        return_content: no
        method: HEAD
        status_code: 200
      register: url_check
      failed_when: url_check.status != 200
      retries: 3  
      delay: 5  
      ignore_errors: no

    - name: Verify that the SHA256 URL is reachable
      uri:
        url: "{{ sha256_url }}"
        return_content: no
        method: HEAD
        status_code: 200
      register: sha256_url_check
      failed_when: sha256_url_check.status != 200
      retries: 3  
      delay: 5  
      ignore_errors: no

    - name: Download Binary From URL
      get_url:
        url: "{{ bin_url }}"
        dest: "{{ user_home }}/{{ version }}.download"
        mode: '0644'

    - name: Download SHA256 checksum file
      get_url:
        url: "{{ sha256_url }}"
        dest: "{{ user_home }}/{{ version }}.sha256"
        mode: '0644'

    - name: Adjust SHA256 file for matching file path
      shell: "sed -i 's|./build/bin/geth-linux-amd64|{{ version }}.download|' {{ user_home }}/{{ version }}.sha256"

    - name: Verify SHA256 checksum
      command: "sha256sum -c --ignore-missing {{ user_home }}/{{ version }}.sha256"
      args:
        chdir: "{{ user_home }}"
      register: sha256_check
      failed_when: "'FAILED' in sha256_check.stdout"

    - name: Fail if checksum verification failed
      fail:
        msg: "SHA256 checksum verification failed. Output: {{ sha256_check.stdout }}"
      when: sha256_check.rc != 0

    - name: Check if the downloaded file is a tar.gz archive
      shell: "file {{ user_home }}/{{ version }}.download"
      register: file_check

    - name: Display file check result
      debug:
        var: file_check.stdout

    - name: Extract the downloaded binary if it is a tar.gz
      unarchive:
        src: "{{ user_home }}/{{ version }}.download"
        dest: "{{ user_home }}/{{ version }}"
        remote_src: yes
      when: "'gzip compressed' in file_check.stdout"

    - name: Set binary path directly if file is not a tar.gz
      set_fact:
        binary_path: "{{ user_home }}/{{ version }}.download"
      when: "'gzip compressed' not in file_check.stdout"

    - name: Find the extracted binary file if the download was a tar.gz
      shell: "find {{ user_home }}/{{ version }} -type f ! -name '._*' | head -n 1"
      register: extracted_binary_path
      when: "'gzip compressed' in file_check.stdout"

    - name: Set binary_path to extracted binary if tar.gz was extracted
      set_fact:
        binary_path: "{{ extracted_binary_path.stdout }}"
      when: "'gzip compressed' in file_check.stdout"

    - name: Display the binary path
      debug:
        var: binary_path

    - name: Ensure binary has executable permissions
      file:
        path: "{{ binary_path }}"
        mode: '0755'
        state: file

    # Stop services, replace binary, and start services in sequence with timing
    - name: Stop cosmovisor and node-geth, replace Geth binary, and start services with timing
      shell: |
        # Record the start time
        start_time=$(date +%s)

        # Stop cosmovisor and node-geth in sequence
        sudo systemctl stop cosmovisor
        sudo systemctl stop node-geth

        # Replace the Geth binary from the prepared local path
        cp {{ binary_path }} /usr/local/bin/geth

        # Start node-geth and cosmovisor in sequence
        sudo systemctl start node-geth
        sudo systemctl start cosmovisor

        # Record the end time
        end_time=$(date +%s)

        # Calculate the duration and display it
        echo "Total time taken: $((end_time - start_time)) seconds"
      register: service_operations_result
      # become: yes

    - name: Display result of service operations and time taken
      debug:
        var: service_operations_result.stdout

    - name: Check if geth version
      command: geth version
      register: geth_check_result
      ignore_errors: yes

    - name: Display result
      debug:
        var: geth_check_result.stdout

    - name: Remove the downloaded file
      file:
        path: "{{ user_home }}/{{ version }}.download"
        state: absent

    - name: Remove the extracted binary directory
      file:
        path: "{{ user_home }}/{{ version }}"
        state: absent
      become: yes

    - name: Get latest 10 lines of node-geth logs
      shell: journalctl -u node-geth -n 10
      register: node_geth_logs
      ignore_errors: yes

    - name: Display latest node-geth logs
      debug:
        var: node_geth_logs.stdout

    - name: Get latest 20 lines of cosmovisor logs
      shell: journalctl -u cosmovisor -n 20
      register: cosmovisor_logs
      ignore_errors: yes

    - name: Display latest cosmovisor logs
      debug:
        msg: "{{ cosmovisor_logs.stdout.split('\n') }}"