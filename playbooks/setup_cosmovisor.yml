---
- name: Setup and configure cosmovisor
  hosts: all
  # become: true
  vars:
    # cosmovisor_url: "https://l1-test-dev.s3.us-east-1.amazonaws.com/cosmovisor/cosmovisor"
    cosmovisor_url: "https://l1-test-dev.s3.us-east-1.amazonaws.com/cosmovisor/cosmovisor_v1.6.0"
    daemon_name: story
    daemon_home: "{{ ansible_env.HOME }}/.story/story"
    cosmovisor_binary_path: "/usr/local/bin/cosmovisor"
    binary_path: "/usr/local/bin/story"
    user: ec2-user
    group: ec2-user
  tasks:
    - name: Create necessary directories for cosmovisor
      file:
        path: "{{ daemon_home }}/{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - backup

    - name: Check if the cosmovisor binary URL is accessible
      uri:
        url: "{{ cosmovisor_url }}"
        method: HEAD
      register: cosmovisor_url_check
      failed_when: cosmovisor_url_check.status != 200
      changed_when: false

    - name: Fail if cosmovisor binary URL is not accessible
      fail:
        msg: "The cosmovisor binary URL is not accessible."
      when: cosmovisor_url_check.status != 200

    - name: Create a specific temporary directory in ec2-user's home directory
      file:
        path: "/home/ec2-user/cosmovisor_temp"
        state: directory
        mode: '0755'
      register: temp_dir

    - name: Print the temporary directory path
      debug:
        var: temp_dir.path

    - name: Download cosmovisor binary to temporary directory
      get_url:
        url:  "{{ cosmovisor_url }}"
        dest: "{{ temp_dir.path }}/cosmovisor"
        mode: '0755'

    - name: Copy cosmovisor binary to /usr/local/bin
      copy:
        src: "{{ temp_dir.path }}/cosmovisor"
        dest: "{{ cosmovisor_binary_path }}"
        remote_src: true
        mode: '0755'
      become: yes

    - name: Initialize cosmovisor with the provided binary path
      command: "{{ cosmovisor_binary_path }} init {{ binary_path }}"
      environment:
        DAEMON_NAME: "story"
        DAEMON_HOME: "{{ daemon_home }}"
      register: cosmovisor_init
      failed_when: cosmovisor_init.rc != 0

    - name: Print cosmovisor init stdout
      debug:
        msg: "Cosmovisor init output: {{ cosmovisor_init.stdout }}"

    - name: Print cosmovisor init stderr
      debug:
        msg: "Cosmovisor init error (if any): {{ cosmovisor_init.stderr }}"

    - name: Create or overwrite cosmovisor systemd service file
      copy:
        dest: /etc/systemd/system/cosmovisor.service
        content: |
          [Unit]
          Description=cosmovisor
          After=network.target

          [Service]
          Type=simple
          User={{ user }}
          Group={{ group }}
          ExecStart={{ cosmovisor_binary_path }} run run --home={{ daemon_home }} --log-level=info
          Restart=on-failure
          RestartSec=5s
          LimitNOFILE=65536
          Environment="DAEMON_NAME={{ daemon_name }}"
          Environment="DAEMON_HOME={{ daemon_home }}"
          Environment="DAEMON_ALLOW_DOWNLOAD_BINARIES=false"
          Environment="DAEMON_RESTART_AFTER_UPGRADE=true"
          Environment="DAEMON_DATA_BACKUP_DIR={{ daemon_home }}/backup"
          WorkingDirectory={{ daemon_home }}

          [Install]
          WantedBy=multi-user.target
      become: yes

    - name: Rename node-story.service to node-story.service.bak
      command: mv /etc/systemd/system/node-story.service /etc/systemd/system/node-story.service.bak
      args:
        removes: /etc/systemd/system/node-story.service.bak
      register: rename_service
      failed_when: rename_service.rc != 0 and rename_service.rc != 1
      become: yes

    - name: Reload systemd to apply changes
      systemd:
        daemon_reload: true
      become: yes

    - name: Stop any existing node-story service
      systemd:
        name: node-story
        state: stopped
        enabled: false
      become: yes
      
    - name: Stop cosmovisor service if running
      systemd:
        name: cosmovisor
        state: stopped
        enabled: false
      become: yes

    - name: Start cosmovisor service
      systemd:
        name: cosmovisor
        state: started
        enabled: true
      become: yes

    - name: Check cosmovisor version
      shell: |
        cosmovisor version 2>&1
      register: cosmovisor_version
      environment:
        DAEMON_NAME: "story"
        DAEMON_HOME: "{{ daemon_home }}"
        NO_COLOR: "1"

    - name: Display cosmovisor version
      debug:
        var: cosmovisor_version.stdout_lines

    - name: Remove temporary directory after copying cosmovisor
      file:
        path: "{{ temp_dir.path }}"
        state: absent
      become: yes

    - name: Display the last 20 lines of cosmovisor service logs
      shell: "journalctl -u cosmovisor.service -n 20"
      register: journal_logs
      changed_when: false

    - name: Print the last 20 lines of cosmovisor service logs
      debug:
        var: journal_logs.stdout