---
- name: Upgrade Cosmovisor Task
  hosts: odyssey_testnet
  # become: yes
  vars:
    # user_home: "/home/ubuntu"
    user_home: "/home/ec2-user"
    version: "" 
    bin_url: "" 
    upgrade_height: ""

  tasks:
    - name: Ensure version to upgrade
      fail:
        msg: "Usage: Provide the version to run"
      when: version == ""

    - name: Ensure the specified upgrade block height
      fail:
        msg: "Usage: Provide the upgrade_height to run"
      when: upgrade_height == ""

    - name: Create directory for extracted binary
      file:
        path: "{{ user_home }}/{{ version }}"
        state: directory
        mode: '0755'

    - name: Verify that the binary URL is reachable
      uri:
        url: "{{ bin_url }}"
        return_content: no
        method: HEAD
        status_code: 200
      register: url_check
      failed_when: url_check.status != 200
      retries: 3  
      delay: 5  
      ignore_errors: no

    - name: Download Binary From URL
      get_url:
        url: "{{ bin_url }}"
        dest: "{{ user_home }}/{{ version }}.download"
        mode: '0644'

    - name: Check if the downloaded file is a tar.gz archive
      shell: "file {{ user_home }}/{{ version }}.download"
      register: file_check

    - name: Display file check result
      debug:
        var: file_check.stdout

    - name: Extract the downloaded binary if it is a tar.gz
      unarchive:
        src: "{{ user_home }}/{{ version }}.download"
        dest: "{{ user_home }}/{{ version }}"
        remote_src: yes
      when: "'gzip compressed' in file_check.stdout"

    - name: Set binary path directly if file is not a tar.gz
      set_fact:
        binary_path: "{{ user_home }}/{{ version }}.download"
      when: "'gzip compressed' not in file_check.stdout"

    - name: Find the extracted binary file if the download was a tar.gz
      shell: "find {{ user_home }}/{{ version }} -type f ! -name '._*' | head -n 1"
      register: extracted_binary_path
      when: "'gzip compressed' in file_check.stdout"

    - name: Set binary_path to extracted binary if tar.gz was extracted
      set_fact:
        binary_path: "{{ extracted_binary_path.stdout }}"
      when: "'gzip compressed' in file_check.stdout"

    - name: Display the binary path
      debug:
        var: binary_path

    - name: Ensure binary has executable permissions
      file:
        path: "{{ binary_path }}"
        mode: '0755'
        state: file

    - name: Check cosmovisor version
      shell: |
        cosmovisor version 2>&1
      register: cosmovisor_version
      environment:
        DAEMON_NAME: "story"
        DAEMON_HOME: "{{ user_home }}/.story/story"
        NO_COLOR: "1"

    - name: Display cosmovisor version
      debug:
        var: cosmovisor_version.stdout_lines

    - name: Send the add upgrade plan
      shell: |
        cosmovisor add-upgrade {{ version }} {{ binary_path }} --force --upgrade-height {{ upgrade_height }}
      register: plan_result
      environment:
        DAEMON_NAME: "story"
        DAEMON_HOME: "{{ user_home }}/.story/story"
        NO_COLOR: "1"

    - name: Display the add upgrade result
      debug:
        var: plan_result.stdout

    - name: Check if the upgrade binary is ready in upgrades directory
      shell: ls -l {{ user_home }}/.story/story/cosmovisor/upgrades/{{ version }}/bin/story
      register: check_bin
    
    - name: Display the ready bin
      debug:
        var: check_bin.stdout

    - name: Verify the upgrade binary
      shell: file {{ user_home }}/.story/story/cosmovisor/upgrades/{{ version }}/bin/story
      register: file_bin
    
    - name: Display the upgrade binary info
      debug:
        var: file_bin.stdout

    - name: Read and display the upgrade-info.json file
      slurp:
        src: "{{ user_home }}/.story/story/data/upgrade-info.json"
      register: upgrade_info_json

    - name: Display the upgrade-info.json contents
      debug:
        msg: "{{ upgrade_info_json.content | b64decode }}"

    - name: Remove the downloaded file
      file:
        path: "{{ user_home }}/{{ version }}.download"
        state: absent

    # - name: Remove the extracted binary directory
    #   file:
    #     path: "{{ user_home }}/{{ version }}"
    #     state: absent
    #   when: plan_result.rc == 0
    #   become: yes